---

backup_role_packages:
  - ssh
  - rsync

#################
# backup server #
#################

# set this to 'true' as host var in order to enable the host as backup server
backup_server: false

# paths / files
backup_server_script: /usr/local/sbin/backup_server
backup_server_path_local: /srv/backup
backup_server_path_sshkey: /root/.ssh/id_rsa
backup_server_path_logdir: /var/log/backup
backup_server_path_status: /var/tmp/backup.status
backup_server_cron:
  cron_file: backupserver
  minute: 30
  hour: 1
  day: "*"
  month: "*"
  weekday: "*"
  user: root
  job: "{{ backup_server_script }} > {{ backup_server_path_logdir }}/backup.log 2>&1"

#################
# backup client #
#################

# run backup as user
backup_client_user: zerobackup
backup_client_user_sshdir: /home/{{ backup_client_user }}/.ssh

# add ssh key to backup_client_user
backup_client_add_ssh_key: true

backup_client_ssh_key_options: no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty,command="/usr/local/sbin/backup_client"

# list of directories to backup
backup_client_dirs: []

# list of pattern to use as --include= arg
backup_client_include: []

# list of pattern to use as --exclude= arg
backup_client_exclude: []

# list of services to stop befor and start after the backup
backup_client_services: []

# list of databases to dump before the backup
backup_client_databases: []

# optional: list of commands to run before backup
# backup_client_exec_pre:

# optional: list of commands to run after backup
# backup_client_exec_post

# number of logfiles to keep on the client
# we always keep at least one backup log
backup_client_keep_logs: 5

# rotate backups
backup_client_rotatecount_daily: 0
backup_client_rotatecount_weekly: 0
backup_client_rotatecount_monthly: 0
backup_client_rotate_weekly_day: 0 # 0=sunday
backup_client_rotate_monthly_day: 1 # -1=last day of month

# if configured, the backup client can be a backup proxy for proxmox lcx containers running on it
# q: why use this method instead of running the client script on the container itself?
# a: we can use lvm snapshots so the downtime of the services on the container can be minimized
# if you like to make use of this, ensure the backup_client_user has the right to perform the required tasks
# or use ackup_client_user: root + backup_client_user_sshdir: /root/.ssh
backup_client_pve: {}
# example:
# backup_client_pve:
#   cl:  # subaltern host name as identifier
#     lcx_id: 101  # container id: (TODO implement this for kvm too ...)
#     lcx_suspend: false  # defaulte: false : if set suspend/resume else shutdown/start will be used (suspend/resume is considered experimental)
#     lcx_commands:  # commands to run using 'pct exec'
#       - service apache2 stop
#       - mkdir -p /var/tmp/backup-databases
#       - bash -c 'mysqldump --single-transaction nextcloud > /var/tmp/backup-databases/nextcloud.sql'  # hackish way to use shell redirect insight the  vm

# defines where the snapshot LVMs of all VMs listed will be mounted
# ! should be included in backup_client_dirs !
backup_client_pve_mountpoint: /mnt

# exit if we encounter a error with a container? if false, continue
backup_client_pve_lcx_exitonerror: false

# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2 smartindent nu
